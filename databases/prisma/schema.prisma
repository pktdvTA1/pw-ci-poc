// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

model users {
  id           Int      @id @default(autoincrement())
  external_id  String
  first_name   String
  last_name    String
  email        String
  phone_number String?
  is_active    Boolean? @default(true)
  is_deleted   Boolean? @default(false)
  created_at   DateTime @default(now())
  created_by   String?
  updated_at   DateTime @default(now())
  updated_by   String?
  role_id      Int
  roleId       roles    @relation(fields: [role_id], references: [id])
}

model roles {
  id               Int                @id @default(autoincrement())
  name             String
  display_name     String
  is_active        Boolean            @default(true)
  is_deleted       Boolean            @default(false)
  created_at       DateTime           @default(now())
  created_by       String?
  updated_at       DateTime           @default(now())
  updated_by       String?
  role_permissions role_permissions[]
  users            users[]
}

model permissions {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  is_active        Boolean            @default(true)
  is_deleted       Boolean            @default(false)
  created_at       DateTime           @default(now())
  created_by       String?
  updated_at       DateTime           @default(now())
  updated_by       String?
  role_permissions role_permissions[]
}

model role_permissions {
  role_id       Int
  permission_id Int
  is_active     Boolean?    @default(true)
  roleId        roles       @relation(fields: [role_id], references: [id])
  permissionId  permissions @relation(fields: [permission_id], references: [id])

  @@unique([role_id, permission_id])
}

// simulate the member from different sources
// softdelete is a mess so better code these stuff
// whereas email, phoneNumber should be unique while
// it's active and not deleted
model external_members {
  id                   Int       @id @default(autoincrement())
  firstName            String?   @db.VarChar(100)
  lastName             String?   @db.VarChar(100)
  nationality          String    @db.VarChar(10)
  email                String    @db.VarChar(100)
  phoneNumber          String?   @db.VarChar(20)
  age                  Int       @db.SmallInt()
  is_active            Boolean   @default(true)
  is_delete            Boolean   @default(false)
  origin               String // source of id e.g. Palace Blade
  external_id          String? // e.g. id of StrokUA
  created_at           DateTime  @default(now())
  identity_number      Int       @db.SmallInt()
  passport_number      String?   @db.VarChar(20)
  passport_expiry_date DateTime?
}

// our registered members
model registered_members {
  id                   Int       @id @default(autoincrement())
  external_member_id   Int       @unique
  firstName            String?   @db.VarChar(100)
  lastName             String?   @db.VarChar(100)
  nationality          String    @db.VarChar(10)
  email                String    @db.VarChar(100)
  phoneNumber          String?   @db.VarChar(20)
  age                  Int       @db.SmallInt()
  is_active            Boolean   @default(true)
  is_delete            Boolean   @default(false)
  origin               String // source of id e.g. Palace Blade
  created_at           DateTime  @default(now())
  identity_number      Int       @db.SmallInt()
  passport_number      String?   @db.VarChar(20)
  passport_expiry_date DateTime?
}

model partners {
  id          Int         @id @default(autoincrement())
  name        String
  is_acitve   Boolean?    @default(true)
  is_delete   Boolean?    @default(false)
  create_date DateTime?   @default(now())
  update_date DateTime?   @default(now())
  exchanges   exchanges[]
}

model exchanges {
  id                  Int       @id @default(autoincrement())
  name                String
  currency_code       String    @db.VarChar(3)
  partner_id          Int
  inbound_ratio_them  Decimal   @db.Decimal(4, 2)
  inbound_ratio_us    Decimal   @db.Decimal(4, 2)
  outbound_ratio_us   Decimal   @db.Decimal(4, 2)
  outbound_ratio_them Decimal   @db.Decimal(4, 2)
  is_active           Boolean?  @default(true)
  is_delete           Boolean?  @default(false)
  minimum_amount      Decimal?  @default(0.00) @db.Decimal(10, 2)
  create_date         DateTime? @default(now())
  update_date         DateTime? @default(now())
  partnerId           partners  @relation(fields: [partner_id], references: [id])

  @@unique([name, currency_code])
}
